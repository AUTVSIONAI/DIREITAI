import { useState, useEffect } from 'react'
import { useAuth } from './useAuth'
import { GamificationService } from '../services/gamification'
import { GoalsService } from '../services/goals'
import { apiClient } from '../lib/api'
import { supabase } from '../lib/supabase'

export const useGamification = () => {
  console.log('üéÆ useGamification - Hook inicializado')
  const { userProfile } = useAuth()
  
  console.log('üéÆ useGamification - userProfile:', userProfile)
  
  const [userPoints, setUserPoints] = useState({
    total: 0,
    level: 1,
    nextLevelPoints: 100,
    weeklyPoints: 0
  })
  const [userStats, setUserStats] = useState({
    badges: 0,
    checkins: 0,
    conversations: 0
  })
  const [userGoals, setUserGoals] = useState({
    monthlyGoal: null,
    weeklyGoal: 200 // Valor padr√£o para meta semanal
  })
  const [recentActivities, setRecentActivities] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [isInitialized, setIsInitialized] = useState(false)

  // Fun√ß√£o para obter o user_id correto da tabela public.users
  const getUserId = async () => {
    console.log('üîç getUserId - userProfile:', userProfile)
    if (!userProfile?.id) {
      console.log('‚ùå getUserId - userProfile.id n√£o encontrado')
      return null
    }
    
    try {
      console.log('üîç getUserId - Buscando user_id para auth_id:', userProfile.id)
      // Buscar o user_id da tabela public.users usando o auth_id
      const { data: user, error } = await supabase
        .from('users')
        .select('id')
        .eq('auth_id', userProfile.id)
        .single()
      
      if (error) {
        console.error('‚ùå Erro ao buscar user_id:', error)
        console.log('üîÑ getUserId - Usando fallback para auth_id:', userProfile.id)
        return userProfile.id // fallback para auth_id
      }
      
      console.log('‚úÖ getUserId - user_id encontrado:', user.id, 'para auth_id:', userProfile.id)
      return user.id
    } catch (error) {
      console.error('‚ùå Erro ao resolver user_id:', error)
      console.log('üîÑ getUserId - Usando fallback para auth_id:', userProfile.id)
      return userProfile.id // fallback para auth_id
    }
  }

  const fetchUserPoints = async () => {
    console.log('üéÆ fetchUserPoints - IN√çCIO DA FUN√á√ÉO')
    try {
      console.log('üéÆ fetchUserPoints - Iniciando busca de pontos')
      if (!userProfile?.id) {
        console.log('‚ùå fetchUserPoints - userProfile.id n√£o encontrado')
        return
      }

      console.log('üéÆ fetchUserPoints - Chamando getUserId()')
      // Usar user_id correto da tabela public.users
      const userId = await getUserId()
      console.log('üîë fetchUserPoints - userId resolvido:', userId)
      if (!userId) {
        console.log('‚ùå fetchUserPoints - userId √© null, retornando')
        return
      }
      
      console.log('üéÆ fetchUserPoints - Preparando requisi√ß√£o')
      // Buscar pontos do usu√°rio
      console.log('üì° fetchUserPoints - Fazendo requisi√ß√£o para:', `/gamification/users/${userId}/points`)
      
      console.log('üöÄ fetchUserPoints - ANTES da requisi√ß√£o para /points')
      try {
        console.log('üöÄ fetchUserPoints - Executando apiClient.get...')
        const pointsResponse = await apiClient.get(`/gamification/users/${userId}/points`)
        console.log('üìä fetchUserPoints - Resposta completa:', pointsResponse)
        console.log('üìä fetchUserPoints - Resposta.data:', pointsResponse.data)
        
        // O apiClient retorna { data, status, statusText, headers, success }
        const responseData = pointsResponse.data || pointsResponse
        console.log('üìä fetchUserPoints - Dados extra√≠dos:', responseData)
        
        if (responseData) {
          const newUserPoints = {
            total: responseData.total || 0,
            level: responseData.level || 1,
            nextLevelPoints: responseData.nextLevelPoints || 100,
            weeklyPoints: 0 // Ser√° calculado separadamente
          }
          console.log('‚úÖ fetchUserPoints - Definindo userPoints:', newUserPoints)
          setUserPoints(newUserPoints)
          console.log('‚úÖ fetchUserPoints - userPoints definido com sucesso')
        }
      } catch (apiError) {
        console.error('‚ùå fetchUserPoints - Erro ESPEC√çFICO na requisi√ß√£o da API:', apiError)
        console.error('‚ùå fetchUserPoints - Detalhes do erro:', apiError.response || apiError.message)
        throw apiError
      }
      console.log('üöÄ fetchUserPoints - DEPOIS da requisi√ß√£o para /points')

      // Buscar estat√≠sticas do usu√°rio
      const statsResponse = await apiClient.get(`/gamification/users/${userId}/stats`)
      
      if (statsResponse) {
        setUserStats({
          badges: statsResponse.badges || 0,
          checkins: statsResponse.checkins || 0,
          conversations: statsResponse.conversations || 0
        })
      }

      // Calcular pontos semanais com base nas transa√ß√µes dos √∫ltimos 7 dias
      try {
        const weekAgo = new Date()
        weekAgo.setDate(weekAgo.getDate() - 7)
        
        const transactionsResponse = await apiClient.get(`/gamification/users/${userId}/points/transactions?since=${weekAgo.toISOString()}`)
        // A API retorna um array diretamente
        const transactions = Array.isArray(transactionsResponse) ? transactionsResponse : (transactionsResponse?.data || [])
        const weeklyPoints = transactions.reduce((sum, transaction) => sum + (transaction.amount || 0), 0)
        
        setUserPoints(prev => ({
          ...prev,
          weeklyPoints
        }))
      } catch (transactionError) {
        // Fallback: estimar pontos semanais como 30% dos pontos totais
        setUserPoints(prev => ({
          ...prev,
          weeklyPoints: Math.floor((prev.total || 0) * 0.3)
        }))
      }

    } catch (error) {
      console.error('‚ùå fetchUserPoints - Erro geral na fun√ß√£o:', error)
      console.error('‚ùå fetchUserPoints - Stack trace:', error.stack)
      setError(error.message)
    } finally {
      console.log('üéÆ fetchUserPoints - FIM DA FUN√á√ÉO')
    }
  }

  const fetchRecentActivities = async () => {
    try {
      if (!userProfile?.id) {
        console.log('‚ùå UserProfile n√£o dispon√≠vel para atividades recentes')
        return
      }

      console.log('üéØ Buscando atividades recentes para usu√°rio:', userProfile?.id)

      // Usar getUserId para buscar atividades recentes
      const userId = await getUserId()
      console.log('üéØ User ID para atividades:', userId)
      
      if (!userId) return
      
      // Buscar atividades recentes
      const activitiesResponse = await apiClient.get(`/gamification/users/${userId}/activities?limit=10`)
      console.log('üéØ Resposta completa das atividades:', activitiesResponse)
      console.log('üéØ Dados das atividades:', activitiesResponse?.data)
      console.log('üéØ Tipo da resposta:', typeof activitiesResponse)
      console.log('üéØ √â array?', Array.isArray(activitiesResponse))
      
      if (activitiesResponse && Array.isArray(activitiesResponse)) {
        console.log('‚úÖ Definindo atividades recentes:', activitiesResponse.length, 'itens')
        setRecentActivities(activitiesResponse)
      } else if (activitiesResponse?.data && Array.isArray(activitiesResponse.data)) {
        console.log('‚úÖ Definindo atividades recentes (via .data):', activitiesResponse.data.length, 'itens')
        setRecentActivities(activitiesResponse.data)
      } else {
        console.log('‚ùå Nenhuma atividade encontrada ou formato inv√°lido')
        setRecentActivities([])
      }
    } catch (error) {
      console.error('Erro ao carregar atividades recentes:', error)
      setRecentActivities([])
    }
  }

  const fetchUserGoals = async () => {
    try {
      const userId = await getUserId()
      
      if (!userId) {
        return
      }
      
      // Buscar meta mensal atual
      const monthlyGoal = await GoalsService.getCurrentMonthlyGoal(userId)
      console.log('üéØ Meta mensal retornada:', monthlyGoal)
      console.log('üéØ Tipo da meta mensal:', typeof monthlyGoal)
      
      if (monthlyGoal) {
        // Atualizar o progresso da meta mensal com os pontos atuais
        const updatedGoal = {
          ...monthlyGoal,
          current_value: userPoints.total || 0
        }
        
        setUserGoals(prev => ({
          ...prev,
          monthlyGoal: updatedGoal
        }))
        
        // Atualizar no backend se necess√°rio
        if (monthlyGoal.current_value !== (userPoints.total || 0)) {
          try {
            await GoalsService.updateMonthlyProgress(userId, userPoints.total || 0)
          } catch (updateError) {
            console.error('Erro ao atualizar progresso no backend:', updateError)
          }
        }
      } else {
        // Se n√£o h√° meta mensal, tentar criar uma automaticamente
        console.log('üéØ Nenhuma meta mensal encontrada, criando automaticamente')
        try {
          const createdGoal = await GoalsService.createMonthlyGoal(userId, userPoints.level || 1)
          if (createdGoal) {
            const updatedGoal = {
              ...createdGoal,
              current_value: userPoints.total || 0
            }
            setUserGoals(prev => ({
              ...prev,
              monthlyGoal: updatedGoal
            }))
            console.log('‚úÖ Meta mensal criada automaticamente:', createdGoal)
          } else {
            throw new Error('Falha ao criar meta mensal')
          }
        } catch (createError) {
          console.error('‚ùå Erro ao criar meta mensal automaticamente:', createError)
          // Fallback: usar meta local sem salvar no backend
          const fallbackGoal = {
            target_value: Math.max(500, (userPoints.level || 1) * 100),
            current_value: userPoints.total || 0,
            goal_type: 'monthly_points',
            status: 'active',
            is_fallback: true
          }
          setUserGoals(prev => ({
            ...prev,
            monthlyGoal: fallbackGoal
          }))
        }
      }
    } catch (error) {
      console.error('Erro ao carregar metas do usu√°rio:', error)
      // Fallback: usar meta baseada no n√≠vel do usu√°rio
      const fallbackGoal = {
        target_value: Math.max(500, (userPoints.level || 1) * 100),
        current_value: userPoints.total || 0,
        goal_type: 'monthly_points',
        status: 'active',
        is_fallback: true
      }
      setUserGoals(prev => ({
        ...prev,
        monthlyGoal: fallbackGoal
      }))
    }
  }



  const refreshData = async () => {
    console.log('üîÑ refreshData - Iniciando atualiza√ß√£o de dados')
    setLoading(true)
    setError(null)
    
    try {
      // Carregar pontos e atividades primeiro
      console.log('üìä refreshData - Carregando pontos e atividades')
      
      console.log('üîÑ refreshData - Chamando fetchUserPoints()')
      try {
        await fetchUserPoints()
        console.log('‚úÖ refreshData - fetchUserPoints() conclu√≠do')
      } catch (pointsError) {
        console.error('‚ùå refreshData - Erro em fetchUserPoints():', pointsError)
      }
      
      console.log('üîÑ refreshData - Chamando fetchRecentActivities()')
      try {
        await fetchRecentActivities()
        console.log('‚úÖ refreshData - fetchRecentActivities() conclu√≠do')
      } catch (activitiesError) {
        console.error('‚ùå refreshData - Erro em fetchRecentActivities():', activitiesError)
      }
      
      // Carregar metas depois dos pontos (j√° inclui atualiza√ß√£o autom√°tica do progresso)
      console.log('üéØ refreshData - Carregando metas')
      await fetchUserGoals()
      
      console.log('‚úÖ refreshData - Dados carregados com sucesso')
    } catch (error) {
      console.error('‚ùå refreshData - Erro ao atualizar dados de gamifica√ß√£o:', error)
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    console.log('üéÆ useEffect - userProfile?.id:', userProfile?.id, 'isInitialized:', isInitialized)
    if (userProfile?.id && !isInitialized) {
      console.log('üéÆ Inicializando gamifica√ß√£o para usu√°rio:', userProfile.id)
      refreshData().finally(() => {
        setIsInitialized(true)
      })
    } else if (!userProfile?.id) {
      console.log('üéÆ useEffect - userProfile n√£o encontrado, resetando estado')
      setLoading(false)
      setIsInitialized(false)
    } else {
      console.log('üéÆ useEffect - Condi√ß√µes n√£o atendidas para inicializa√ß√£o')
    }
  }, [userProfile?.id, isInitialized])

  // For√ßar nova busca da meta mensal
  useEffect(() => {
    if (userProfile?.id) {
      const forceGoalRefresh = async () => {
        try {
          console.log('üîÑ For√ßando nova busca da meta mensal...');
          await fetchUserGoals();
        } catch (error) {
          console.error('üîÑ Erro ao for√ßar busca da meta:', error);
        }
      };
      // Aguardar um pouco para garantir que os pontos foram carregados
      setTimeout(forceGoalRefresh, 2000);
    }
  }, [userProfile?.id])

  const updateGoalProgress = async (goalId, currentValue) => {
    try {
      const userId = await getUserId()
      await GoalsService.updateGoal(userId, goalId, { current_value: currentValue })
      await fetchUserGoals() // Recarregar metas ap√≥s atualiza√ß√£o
    } catch (error) {
      console.error('Erro ao atualizar progresso da meta:', error)
    }
  }

  return {
    userPoints,
    userStats,
    userGoals,
    recentActivities,
    loading,
    error,
    refreshData,
    updateGoalProgress
  }
}